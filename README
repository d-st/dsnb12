Uebungen
========

1. Gegeben sei die Grammatik aus der Vorlesung:
      S -> E $
      E -> T + E
      E -> T
      T -> a
   a) Untersuchen Sie die Bewegungen des Automaten aus der Vorlesung
      fuer die Eingabe "a + a + a $".
   b) Wandeln Sie die Grammatik in eine linksrekursive Form um.
   c) Erstellen Sie die LR(0)-Tabelle fuer b). Gibt es Konflikte?
   d) Erstellen Sie die SLR(1)-Tabelle fuer b). Gibt es Konflikte?
   e) Untersuchen Sie die Bewegungen des Automaten aus d) fuer die
      Eingabe "a + a + a $".
   f) Was folgern Sie?

2. Zeigen Sie, dass die folgende Grammatik LL(1) ist, aber nicht SLR(1).
   S -> AaAb | BbBa
   A -> <epsilon>
   B -> <epsilon>

3. Schreiben Sie eine Bison-Parserspezifikation, die arithmetische
   Ausdruecke ueber ganzen Zahlen und den vier Grundrechenarten als
   Eingabe erhaelt und die entsprechenden Postfixausdruecke als
   Ausgabe erzeugt.


Programmieraufgabe
==================

Problemstellung
---------------

Aufbau des zu einem Programm gehoerenden Syntax-Baumes waehrend der
Durchfuehrung der syntaktischen Analyse.


Vorgegebene Dateien
-------------------

README          -  die Beschreibung, die Sie gerade lesen
absyn.h         -  Interface zur Abstrakten Syntax
absyn.c         -  Abstrakte Syntax (Knotenkonstruktoren und Pretty-Printer)
main.c          -  das Hauptprogramm des entstehenden Compilers
sym.h           -  Interface zur Symbolverwaltung
sym.c           -  die Symbolverwaltung


Aufgaben
--------

1. Machen Sie sich anhand des Interfaces zur Symbolverwaltung mit
   der Handhabung von Symbolen vertraut.

2. Studieren Sie die Abstrakte Syntax. Machen Sie sich anhand der
   Knotenkonstruktoren klar, welche Information zu welchem
   Quelltextkonstrukt im Syntaxbaum aufgehoben wird.

3. Konstruieren Sie einige Baeume durch geschachtelte Aufrufe der
   Knotenkonstruktoren (Erinnerung: das Programm im ersten Aufgaben-
   blatt wurde so vorgegeben). Geben Sie dann jeden Baum durch Aufruf
   des Pretty-Printers aus.

4. Ergaenzen Sie Ihren Parser so, dass er zu jedem SPL-Programm den
   zugehoerigen Syntaxbaum in der globalen Variablen progTree abliefert.
   a) In parser.h ist die Deklaration der globalen Variablen hinzuzufuegen:
      extern Absyn *progTree;
   b) In parser.y ist die Definition der globalen Variablen hinzuzufuegen:
      Absyn *progTree;
   c) Die Datenstruktur (definiert mit %union), die bisher nur die Werte
      fuer die Terminalsymbole (Tokens) speicherte, erhaelt nun eine neue
      Komponente, die einen Zeiger auf einen Baumknoten speichern kann:
      Absyn *node;
      Diese Komponente repraesentiert den Wert eines Nichtterminals.
   d) In parser.y geben Sie fuer alle Terminal- und Nichtterminalsymbole
      diejenige Komponente in der Union an, die den entsprechenden Wert
      darstellt. Schlagen Sie die genaue Syntax hierfuer in der Info-
      Dokumentation fuer Bison nach.
   e) Nun koennen Sie die semantischen Aktionen zum Aufbau der Abstrakten
      Syntax in die Grammatik-Regeln einfuegen.

5. Jetzt kommt die Nagelprobe: lassen Sie die im letzten Aufgabenblatt
   erstellten Testprogramme sowohl von Ihrem Compiler als auch von der
   Referenzimplementierung in Abstrakte Syntax umwandeln und ausgeben
   (geht mit dem Kommandozeilen-Argument --absyn). Es muss exakt dieselbe
   Ausgabe erzeugt werden. Bei Diskrepanzen, die Sie nicht selber klaeren
   koennen, bitte unbedingt im Praktikum nachfragen!
